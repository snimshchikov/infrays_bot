from random import randint
import os
import logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                     level=logging.INFO)

from aiogram import Bot, Dispatcher, executor, types

from db import DB
from secret import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

db = DB(os.path.join('.','db','bot.db'))

replies = ["–¢—ã —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –Ω–∞ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω?",
           "–ù–µ –ø–æ—Å—Ç–∏ –ª–∏–±–µ—Ä—Ç–æ–¥—É, –Ω–µ –ø–æ–∑–æ—Ä—å—Å—è."]

legion_replies = ["–ù–æ–≤–æ—Å—Ç–∏ –õ–µ–≥–∏–æ–Ω–∞, –æ—Å—Ç–∞—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ –õ–µ–≥–∏–æ–Ω–∞."]

tg_replies = ['–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ —Ç—Ä–∞–Ω—Å–≥—É–º–∞–Ω–∏–∑–º. –í—ã –ê—Ä—Ç—ë–º –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤?', 
            '–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ —Ç—Ä–∞–Ω—Å–≥—É–º–∞–Ω–∏–∑–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–æ—á–µ.']

from datetime import datetime
class Timer():
    timers = {}
    interval = 2 #minutes between replies EDIT AT YOUR LIKING
    def __init__(self, label):
        if label in Timer.timers.keys():
            self.last_invoked = Timer.timers[label].last_invoked #inelegant way to retriev class ;) 
            self.label = label
            return
        self.last_invoked = datetime(2010, 9, 12, 11, 19, 54) #random copypaste, setting far date to allow first triggering
        self.label = label
        Timer.timers[label] = self
    def check(self):
        if (datetime.now()-self.last_invoked).total_seconds()/60>Timer.interval:
            print(self.label, self.last_invoked)
            self.last_invoked = datetime.now()
            return True
        return False
swears = [
    "–≥–æ–≤–Ω–æ",
    "–∑–∞–ª—É–ø–∞",
    "–æ—Ç—Ä—ã–∂–∫–∞ –ø–∏–¥–æ—Ä–∞—Å–∞",
    "—Ö–µ—Ä",
    "–ø–∏–¥–æ—Ä",
    "–¥–∞.\n–ü–∏–∑–¥–∞",
    "—Ö—É–π",
    "–º–∞–ª–∞—Ñ—å—è",
    "–ê–Ω—É—Å –ü–æ—Ç—Ä–µ–ø–∏–¥–∑–µ",
    "–¥–Ω–∏—â–µ –µ–±–∞–Ω–æ–µ",
    "—Å–≤–µ—Ç–∏—Å—Ç –µ–±–∞–Ω—ã–π",
    "–¥–æ—á–∫–∞ –∫–æ–Ω–µ–µ–±–∞",
    "–æ–≤–æ—â –≥–Ω–∏–ª–æ–π",
]
prefix_swears = [
    "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–¥—Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Ç—ã ",
    "–¢—ã –∫—Å—Ç–∞—Ç–∏ ",
    "–ú–∏—Ä—É –º–∏—Ä, –∞ —Ç—ã ",
    "–í –æ–≥–æ—Ä–æ–¥–µ –±—É–∑–∏–Ω–∞, –∞ —Ç—ã ",
    "–°–µ–π—á–∞—Å —è –≤–∞–º –ø–æ–∫–∞–∂—É –æ—Ç–∫—É–¥–∞ –Ω–∞ –ë–µ–ª–∞—Ä—É—Å—å –≥–æ—Ç–æ–≤–∏–ª–æ—Å—å –Ω–∞–ø–∞–¥–µ–Ω–∏–µ. –ò –µ—Å–ª–∏ –±—ã –Ω–µ —Ç—ã ",
]
@dp.message_handler()
async def chat_sender_handler(message: types.Message):
    if message is None:
        return
    sender = message.from_user

    first_last_names = ""
    if sender.first_name:
        first_last_names+=sender.first_name
    if sender.last_name:
        first_last_names+=' '+sender.last_name
    first_last_names = first_last_names.strip()
    # mention generation
    if sender is not None:
        mention = sender.username
        if mention is None:
            mention = first_last_names
        else:
            mention = "@"+mention
    if message.chat.id in {-1001176998310,-1001154772762}: #ID OF KATZBOTS and TEST CHANNEL
        await db.add_count(sender.id, first_last_names)

    if message.sender_chat:
        await bot.ban_chat_sender_chat(chat_id=message.chat.id, sender_chat_id=message.sender_chat.id)
        await bot.send_message(chat_id=message.chat.id, text=f"–ó–∞–±–∞–Ω–∏–ª –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –ò–º—è: {message.sender_chat.title} - –¢–µ–≥: {message.sender_chat.username}!")
    elif message.forward_from_chat and message.chat.id in {-1001176998310,-1001154772762}:
        if message.forward_from_chat.id in {-1001522560514,-1001513669961}: # SVTV news and I don't know what else
            await message.delete()
            if Timer('label0').check():
                await bot.send_message(chat_id=message.chat.id, text=f"{mention} "+replies[randint(0,len(replies)-1)])
        elif message.forward_from_chat.id in {-1001227769643,}: # legion id
            await message.delete()
            if Timer('label_legion').check():
                await bot.send_message(chat_id=message.chat.id, text=f"{mention} "+legion_replies[randint(0,len(legion_replies)-1)])
    elif message.text and message.chat.id in {-1001176998310,-1001154772762}:
        if randint(0,10)==1:
            await message.reply(text=prefix_swears[randint(0,len(prefix_swears)-1)]+swears[randint(0,len(swears)-1)]+' üòâ')
        lower_text = message.text.lower()
        if 'twitter.com/svtv_news' in lower_text or 'svtv.org' in lower_text:
            await message.delete()
            if Timer('label1').check():
                await bot.send_message(chat_id=message.chat.id, text=f"{mention} "+replies[randint(0,len(replies)-1)])
        elif "–ª–∏–±–µ—Ä—Ç" in lower_text:
            if Timer('label2').check():
                await message.reply(text="–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ –ª–∏–±–µ—Ä—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ. –ï—Å–ª–∏ –≤—ã –ª–∏–±–µ—Ä—Ç–∞—Ä–∏–∞–Ω–µ—Ü, —Ç–æ –≤–∞—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∫—Ü–∏–Ω–∏—Ä—É—é—Ç.")
        elif "—Å–≤–µ—Ç–æ–≤" in lower_text:
            if Timer('label3').check():
                await message.reply(text="–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ –°–≤–µ—Ç–æ–≤–∞.... –ó–∞—á–µ–º?")
        elif "—Ç—Ä–∞–Ω—Å–≥—É–º" in lower_text or "—Ç—Ä–∞–Ω—Å–≥—É–º" in lower_text:
            if Timer('label4').check():
                await message.reply(text=tg_replies[randint(0,len(tg_replies)-1)])
        elif "–∏–Ω–æ–∞–≥" in lower_text and not message.forward_from_chat:
            if Timer('label5').check():
                await message.reply(text=
                    "–î–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï (–ú–ê–¢–ï–†–ò–ê–õ) –°–û–ó–î–ê–ù–û –ò (–ò–õ–ò) –†–ê–°–ü–†–û–°–¢–†–ê–ù–ï–ù–û –ò–ù–û–°–¢–†–ê–ù–ù–´–ú –°–†–ï–î–°–¢–í–û–ú –ú–ê–°–°–û–í–û–ô "+\
                    "–ò–ù–§–û–†–ú–ê–¶–ò–ò, –í–´–ü–û–õ–ù–Ø–Æ–©–ò–ú –§–£–ù–ö–¶–ò–ò –ò–ù–û–°–¢–†–ê–ù–ù–û–ì–û –ê–ì–ï–ù–¢–ê, –ò (–ò–õ–ò) –†–û–°–°–ò–ô–°–ö–ò–ú –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ú –õ–ò–¶–û–ú, "+\
                    "–í–´–ü–û–õ–ù–Ø–Æ–©–ò–ú –§–£–ù–ö–¶–ò–ò –ò–ù–û–°–¢–†–ê–ù–ù–û–ì–û –ê–ì–ï–ù–¢–ê"
                )
if __name__ == '__main__':
    executor.start_polling(dp)
